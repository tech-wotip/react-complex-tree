(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[212],{30876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return u}});var i=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=i.createContext({}),l=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=l(e.components);return i.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=l(n),u=o,h=p["".concat(d,".").concat(u)]||p[u]||m[u]||a;return n?i.createElement(h,r(r({ref:t},s),{},{components:n})):i.createElement(h,r({ref:t},s))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=p;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var l=2;l<a;l++)r[l]=n[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},44821:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return d},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var i=n(7560),o=n(98283),a=(n(2784),n(30876)),r=["components"],c={sidebar_position:10},d="Interaction Modes",l={unversionedId:"guides/interaction-modes",id:"guides/interaction-modes",isDocsHomePage:!1,title:"Interaction Modes",description:"The interaction mode for a tree environment refers to how mouse inputs should interact with the tree.",source:"@site/docs/guides/interaction-modes.mdx",sourceDirName:"guides",slug:"/guides/interaction-modes",permalink:"/docs/guides/interaction-modes",editUrl:"https://github.com/lukasbach/react-complex-tree/edit/main/packages/docs/docs/guides/interaction-modes.mdx",version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Keyboard Bindings",permalink:"/docs/guides/keyboard"},next:{title:"External Interaction via Refs",permalink:"/docs/guides/refs"}},s=[{value:"<code>InteractionMode.ClickArrowToExpand</code>",id:"interactionmodeclickarrowtoexpand",children:[]},{value:"<code>InteractionMode.ClickItemToExpand</code>",id:"interactionmodeclickitemtoexpand",children:[]},{value:"<code>InteractionMode.DoubleClickItemToExpand</code>",id:"interactionmodedoubleclickitemtoexpand",children:[]},{value:"Custom interaction modes",id:"custom-interaction-modes",children:[]},{value:"Completely omitting interaction modes",id:"completely-omitting-interaction-modes",children:[]}],m={toc:s};function p(e){var t=e.components,n=(0,o.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interaction-modes"},"Interaction Modes"),(0,a.kt)("p",null,"The interaction mode for a tree environment refers to how mouse inputs should interact with the tree.\nThe interaction mode can be provided as prop to the tree environment with the name ",(0,a.kt)("inlineCode",{parentName:"p"},"interactionMode")," and needs\nto follow ",(0,a.kt)("a",{parentName:"p",href:"docs/api/enums/interactionmode"},"the ",(0,a.kt)("inlineCode",{parentName:"a"},"InteractionMode")," enum"),"\nThe following interaction modes are provided by default:"),(0,a.kt)("h2",{id:"interactionmodeclickarrowtoexpand"},(0,a.kt)("inlineCode",{parentName:"h2"},"InteractionMode.ClickArrowToExpand")),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lukasbach/react-complex-tree/blob/main/packages/core/src/interactionMode/ClickArrowToExpandInteractionManager.ts"},"the implementation of that interaction mode"),"\nfor more details."))),(0,a.kt)("p",null,"Clicking on items only moves focus. Pressing the CTRL key while clicking toggles the select state of the\nclicked item. Expanding items is only possible by clicking on the arrow or via keyboard interactions.\nClicking on an item without children invokes the primary action for that item."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function App() {\n  return (\n    <UncontrolledTreeEnvironment\n      dataProvider={new StaticTreeDataProvider(longTree.items, (item, data) => ({ ...item, data }))}\n      getItemTitle={item => item.data}\n      viewState={{}}\n      defaultInteractionMode={\'click-arrow-to-expand\'}\n    >\n      <Tree treeId="tree-1" rootItem="root" treeLabel="Tree Example" />\n    </UncontrolledTreeEnvironment>\n  );\n}\n')),(0,a.kt)("h2",{id:"interactionmodeclickitemtoexpand"},(0,a.kt)("inlineCode",{parentName:"h2"},"InteractionMode.ClickItemToExpand")),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lukasbach/react-complex-tree/blob/main/packages/core/src/interactionMode/ClickItemToExpandInteractionManager.ts"},"the implementation of that interaction mode"),"\nfor more details."))),(0,a.kt)("p",null,"This is the default interaction mode. Clicking on items changes the select state to only the clicked item,\nfocuses the item and expands or collapses the item if it has children. Pressing the CTRL key while clicking toggles\nthe select state of the clicked item.\nClicking on an item without children invokes the primary action for that item."),(0,a.kt)("p",null,"This resembles the way how VSCode provides interactions with its tree view."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function App() {\n  return (\n    <UncontrolledTreeEnvironment\n      dataProvider={new StaticTreeDataProvider(longTree.items, (item, data) => ({ ...item, data }))}\n      getItemTitle={item => item.data}\n      viewState={{}}\n      defaultInteractionMode={\'click-item-to-expand\'}\n    >\n      <Tree treeId="tree-2" rootItem="root" treeLabel="Tree Example" />\n    </UncontrolledTreeEnvironment>\n  );\n}\n')),(0,a.kt)("h2",{id:"interactionmodedoubleclickitemtoexpand"},(0,a.kt)("inlineCode",{parentName:"h2"},"InteractionMode.DoubleClickItemToExpand")),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lukasbach/react-complex-tree/blob/main/packages/core/src/interactionMode/DoubleClickItemToExpandInteractionManager.ts"},"the implementation of that interaction mode"),"\nfor more details."))),(0,a.kt)("p",null,"This is the default interaction mode. Clicking on items changes the select state to only the clicked item, but\ndoes not expand or collapse parents or execute primary actions.\nDouble clicking an item expands or collapses parents and invokes primary actions on items without children.\nPressing the CTRL key while clicking toggles the select state of the clicked item."),(0,a.kt)("p",null,"This resembles the way of IntelliJ or other Jetbrain IDEs provides interactions with its tree view."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function App() {\n  return (\n    <UncontrolledTreeEnvironment\n      dataProvider={new StaticTreeDataProvider(longTree.items, (item, data) => ({ ...item, data }))}\n      getItemTitle={item => item.data}\n      viewState={{}}\n      defaultInteractionMode={\'double-click-item-to-expand\'}\n    >\n      <Tree treeId="tree-3" rootItem="root" treeLabel="Tree Example" />\n    </UncontrolledTreeEnvironment>\n  );\n}\n')),(0,a.kt)("h2",{id:"custom-interaction-modes"},"Custom interaction modes"),(0,a.kt)("p",null,"Instead of providing a string referring to the desired interaction mode, you can also provide a custom\ninteraction manager implementation which implements the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/interfaces/interactionmanager"},"InteractionManager"),"\nimplementation."),(0,a.kt)("p",null,"Essentially, it needs to implement a ",(0,a.kt)("inlineCode",{parentName:"p"},"createInteractiveElementProps")," method which provides HTML props for\na interactive tree item node. Look ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/interfaces/interactionmanager"},"into the API")," to see which\nparameters are available as arguments."),(0,a.kt)("p",null,"The best way to get started is to look into the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lukasbach/react-complex-tree/tree/main/packages/core/src/interactionMode"},"implementations of existing interaction modes"),",\nto see which props you should implement."),(0,a.kt)("p",null,"The following example shows a custom very simple interaction mode which only focuses items when clicking on them,\nbut never selects them."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function App() {\n  return (\n    <UncontrolledTreeEnvironment\n      dataProvider={new StaticTreeDataProvider(longTree.items, (item, data) => ({ ...item, data }))}\n      getItemTitle={item => item.data}\n      defaultInteractionMode={{\n        mode: 'custom',\n        createInteractiveElementProps: (item, treeId, actions, renderFlags) => ({\n          onClick: e => {\n            actions.focusItem();\n          },\n          onFocus: () => {\n            actions.focusItem();\n          },\n          tabIndex: !renderFlags.isRenaming ? (renderFlags.isFocused ? 0 : -1) : undefined,\n        }),\n      }}\n      viewState={{\n        ['tree-4']: {\n          expandedItems: ['Fruit', 'Meals'],\n        },\n      }}\n    >\n      <Tree treeId=\"tree-4\" rootItem=\"root\" treeLabel=\"Tree Example\" />\n    </UncontrolledTreeEnvironment>\n  );\n}\n")),(0,a.kt)("p",null,"Typically, you don't want to implement the complete interaction manager yourself. You can specify one\nof the default interaction modes that you want to extend with the ",(0,a.kt)("inlineCode",{parentName:"p"},"extend")," prop:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function App() {\n  return (\n    <UncontrolledTreeEnvironment\n      dataProvider={new StaticTreeDataProvider(longTree.items, (item, data) => ({ ...item, data }))}\n      getItemTitle={item => item.data}\n      defaultInteractionMode={{\n        mode: 'custom',\n        extends: 'click-item-to-expand',\n        createInteractiveElementProps: (item, treeId, actions, renderFlags) => ({\n          onMouseOver: () => {\n            document\n              .querySelectorAll(`[data-rct-tree=\"tree-5\"] [data-rct-item-id]`)\n              .forEach(element => (element.style.background = 'transparent'));\n            document.querySelector(`[data-rct-tree=\"tree-5\"]  [data-rct-item-id=\"${item.index}\"]`).style.background =\n              'red';\n          },\n        }),\n      }}\n      viewState={{\n        ['tree-5']: {\n          expandedItems: ['Fruit', 'Meals'],\n        },\n      }}\n    >\n      <Tree treeId=\"tree-5\" rootItem=\"root\" treeLabel=\"Tree Example\" />\n    </UncontrolledTreeEnvironment>\n  );\n}\n")),(0,a.kt)("h2",{id:"completely-omitting-interaction-modes"},"Completely omitting interaction modes"),(0,a.kt)("p",null,"The interaction mode defines, how the ",(0,a.kt)("inlineCode",{parentName:"p"},"interactiveElementProps")," prop is created for rendering the interactive\nelement of an tree item. The prop can also easily be omitted in custom render implementations and individual DOM\ninteractions can be defined instead.\n",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/rendering"},"Look into the documentation on custom render hooks")," to find out more."))}p.isMDXComponent=!0}}]);