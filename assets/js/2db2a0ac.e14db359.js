(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4088],{30876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return u}});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},99660:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=n(7560),a=n(98283),i=(n(2784),n(30876)),o=["components"],l={sidebar_position:1},s="Get Started",c={unversionedId:"getstarted",id:"getstarted",isDocsHomePage:!1,title:"Get Started",description:"The following document shows how React Complex Tree can be installed and used in your",source:"@site/docs/getstarted.mdx",sourceDirName:".",slug:"/getstarted",permalink:"/docs/getstarted",editUrl:"https://github.com/lukasbach/react-complex-tree/edit/main/packages/docs/docs/getstarted.mdx",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Uncontrolled Environment",permalink:"/docs/guides/uncontrolled-environment"}},p=[{value:"Installation",id:"installation",children:[]},{value:"Importing",id:"importing",children:[]},{value:"Using CDNs",id:"using-cdns",children:[]},{value:"Integrating React Complex Tree into your project",id:"integrating-react-complex-tree-into-your-project",children:[]},{value:"Providing the data for the tree",id:"providing-the-data-for-the-tree",children:[]}],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"get-started"},"Get Started"),(0,i.kt)("p",null,"The following document shows how React Complex Tree can be installed and used in your\nweb projects."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"To start using React Complex Table, install it to your project as a dependency via"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install react-complex-tree\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"yarn add react-complex-tree\n")),(0,i.kt)("h2",{id:"importing"},"Importing"),(0,i.kt)("p",null,"You can always import any of the entities used in the examples directly as named imports from\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"react-complex-tree")," package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { UncontrolledTreeEnvironment, Tree, StaticTreeDataProvider } from 'react-complex-tree';\n")),(0,i.kt)("p",null,"Make sure to also import the CSS file that defines the default styling of React Complex Tree, if\nyou do not intent do provide manual CSS declarations. More on the default stylings and possibilities\nto modify those are given ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/styling"},"in the guide on styling customizability"),". Import the\nCSS in one of the following ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Import it directly in your JS code, if you use Webpack with a loader that can load CSS files:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import 'react-complex-tree/lib/style.css';\n"))),(0,i.kt)("li",{parentName:"ul"},"Import it from within a CSS file with node-style package resolution:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-css"},"@import '~react-complex-tree/lib/style.css';\n"))),(0,i.kt)("li",{parentName:"ul"},"Import it in your HTML by linking to the CSS file in your ",(0,i.kt)("inlineCode",{parentName:"li"},"node_modules")," or on unpkg:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<head>\n  <link href="https://unpkg.com/react-complex-tree/lib/style.css" rel="stylesheet" />\n</head>\n')))),(0,i.kt)("p",null,"React Complex Tree comes compiled as CommonJS package, ESM package and ESNext package."),(0,i.kt)("h2",{id:"using-cdns"},"Using CDNs"),(0,i.kt)("p",null,"The package is also available as UMD bundle which can be consumed from the ",(0,i.kt)("a",{parentName:"p",href:"https://unpkg.com"},"unpkg CDN"),".\nYou can import it in your HTML by copying the following snippet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<head>\n  <link href="https://unpkg.com/react-complex-tree/lib/style.css" rel="stylesheet" />\n  <script src="https://unpkg.com/react-complex-tree/lib/bundle.js"><\/script>\n</head>\n')),(0,i.kt)("p",null,"Importing the file ",(0,i.kt)("inlineCode",{parentName:"p"},"https://unpkg.com/react-complex-tree/lib/bundle.js")," will make the variable ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactComplexTree"),"\navailable to the global scope. All exports from the package are then available as children of that variable,\ni.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactComplexTree.UncontrolledTreeEnvironment")," can be used to reference the react component of an uncontrolled\ntree environment."),(0,i.kt)("h2",{id:"integrating-react-complex-tree-into-your-project"},"Integrating React Complex Tree into your project"),(0,i.kt)("p",null,"After installation, import the package and start using it by creating a new tree environment that\ncontains a tree instance."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function App() {\n  return (\n    <UncontrolledTreeEnvironment\n      dataProvider={new StaticTreeDataProvider(longTree.items, (item, data) => ({ ...item, data }))}\n      getItemTitle={item => item.data}\n      viewState={{}}\n    >\n      <Tree treeId="tree-1" rootItem="root" treeLabel="Tree Example" />\n    </UncontrolledTreeEnvironment>\n  );\n}\n')),(0,i.kt)("p",null,"The example above uses an ",(0,i.kt)("a",{parentName:"p",href:"/docs/react/UncontrolledTreeEnvironment"},"UncontrolledTreeEnvironment"),", which is\nthe easiest way to get started as it maintains the tree view state in itself. Inside the environment,\nthe ",(0,i.kt)("a",{parentName:"p",href:"/docs/react/Tree"},"Tree")," itself is added to the DOM structure. You can add multiple trees within one\nenvironment, that share a common state. Each tree needs to provide"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An individual ID for the tree, which remains unique for that tree."),(0,i.kt)("li",{parentName:"ul"},"Which item is used as root item for that tree. Different trees may show different items as root."),(0,i.kt)("li",{parentName:"ul"},"Optionally, a label, which is used as accessibility label for that tree to describe it to screen readers.")),(0,i.kt)("p",null,"Individual trees do not provide their own state, but share the state that is provided by the environment."),(0,i.kt)("p",null,"For the environment, there are three ways to implement your tree environment:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use an ",(0,i.kt)("a",{parentName:"li",href:"/docs/react/UncontrolledTreeEnvironment"},"UncontrolledTreeEnvironment")," and a\n",(0,i.kt)("a",{parentName:"li",href:"/docs/api/classes/StaticTreeDataProvider"},"StaticTreeDataProvider")," that provides the items. This is the easiest\napproach and is described below."),(0,i.kt)("li",{parentName:"ul"},"Use an ",(0,i.kt)("a",{parentName:"li",href:"/docs/react/UncontrolledTreeEnvironment"},"UncontrolledTreeEnvironment")," and implement a custom\n",(0,i.kt)("a",{parentName:"li",href:"/docs/api/interfaces/TreeDataProvider"},"TreeDataProvider"),". This is similarly easy and provides the ability to\ndirectly react to change events and define a lazy item-loading strategy. This approach is most likely the best\nway to integrate React Complex Tree in realistic scenarios. This approach is described here TODO"),(0,i.kt)("li",{parentName:"ul"},"Use an ",(0,i.kt)("a",{parentName:"li",href:"/docs/api/classes/StaticTreeDataProvider"},"StaticTreeDataProvider"),". This requires you to define your\nown logic to manage the view state, thus requiring the most effort, but also provides the most customizability.\nThis approach is described here TODO")),(0,i.kt)("h2",{id:"providing-the-data-for-the-tree"},"Providing the data for the tree"),(0,i.kt)("p",null,"When integrating React Complex Tree with an uncontrolled environment and a static tree data provider, items\nmust be provided as ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/interfaces/explicitdatasource"},"explicit data source"),". An example for such\nitems looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},"const items = {\n  root: {\n    index: 'root',\n    canMove: true,\n    hasChildren: true,\n    children: ['child1', 'child2'],\n    data: 'Root item',\n    canRename: true,\n  },\n  child1: {\n    index: 'child1',\n    canMove: true,\n    hasChildren: false,\n    children: [],\n    data: 'Child item 1',\n    canRename: true,\n  },\n  child2: {\n    index: 'child2',\n    canMove: true,\n    hasChildren: false,\n    children: [],\n    data: 'Child item 2',\n    canRename: true,\n  },\n};\n")),(0,i.kt)("p",null,"Each item needs to implement the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/interfaces/treeitem"},"TreeItem")," interface. The ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," attribute\nis generic and can contain any kind of data such as objects or strings. The environment then also needs to\nimplement the ",(0,i.kt)("inlineCode",{parentName:"p"},"getItemTitle")," method, which derives the title of the item given a ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/interfaces/treeitem"},"TreeItem"),"\ninstance. In our example, where ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," is just a string that contains the title, we can use the trivial\nimplementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"getItemTitle={item => item.data}"),"."))}m.isMDXComponent=!0}}]);