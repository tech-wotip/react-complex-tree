(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5069],{30876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return u}});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=i,h=p["".concat(c,".").concat(u)]||p[u]||m[u]||o;return n?r.createElement(h,a(a({ref:t},l),{},{components:n})):r.createElement(h,a({ref:t},l))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var d=2;d<o;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},12285:function(e,t,n){"use strict";n.d(t,{i:function(){return a}});var r=n(7560),i=n(2784),o=n(18873),a=function(e){var t=e.storyName,n=e.iframeProps;return i.createElement(o.Z,(0,r.Z)({src:"/storybook/iframe.html?id="+t+"&args=&viewMode=story",frameBorder:0,allowtransparency:"true",style:n.width||n.minWidth||n.maxWidth?{}:{width:"1px",minWidth:"100%"}},null!=n?n:{}))}},24561:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return d},metadata:function(){return l},toc:function(){return m},default:function(){return u}});var r=n(7560),i=n(98283),o=(n(2784),n(30876)),a=n(12285),s=["components"],c={sidebar_position:3.5},d="Custom Render Hooks",l={unversionedId:"guides/rendering",id:"guides/rendering",isDocsHomePage:!1,title:"Custom Render Hooks",description:"React Complex Tree is completely unopinionated and allows you to customize every single node written to the DOM",source:"@site/docs/guides/rendering.mdx",sourceDirName:"guides",slug:"/guides/rendering",permalink:"/docs/guides/rendering",editUrl:"https://github.com/lukasbach/react-complex-tree/edit/main/packages/docs/docs/guides/rendering.mdx",version:"current",sidebarPosition:3.5,frontMatter:{sidebar_position:3.5},sidebar:"tutorialSidebar",previous:{title:"Styling Customizability",permalink:"/docs/guides/styling"},next:{title:"Managing a tree's view state",permalink:"/docs/guides/viewstate"}},m=[{value:"Minimalistic Example for custom render hooks",id:"minimalistic-example-for-custom-render-hooks",children:[]},{value:"Complex Example for custom render hooks",id:"complex-example-for-custom-render-hooks",children:[]},{value:"Customizing the render logic for tree items",id:"customizing-the-render-logic-for-tree-items",children:[]}],p={toc:m};function u(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"custom-render-hooks"},"Custom Render Hooks"),(0,o.kt)("p",null,"React Complex Tree is completely unopinionated and allows you to customize every single node written to the DOM\ntree."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"React Complex Tree provides default renderers that fulfill\n",(0,o.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/wai-aria-practices-1.1/examples/treeview/treeview-2/treeview-2a.html"},"the accessibility requirements for tree structures as specified by W3C"),".\nThis may no longer hold if you implement your own renderers instead."),(0,o.kt)("p",{parentName:"div"},"If you provide custom renderers, make sure to create a DOM structure that fulfills the\naccessibility requirements by W3C."))),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you only want to make small adjustments to the styling of the tree like adaptions to spacing, fonts or colors,\nyou can look into the ",(0,o.kt)("a",{parentName:"p",href:"styling"},"styling guide")," to see how you can use custom CSS variables and rules to adapt how\nthe tree rendered by the default render hooks looks like."))),(0,o.kt)("h2",{id:"minimalistic-example-for-custom-render-hooks"},"Minimalistic Example for custom render hooks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function App() {\n  return (\n    <UncontrolledTreeEnvironment\n      canDragAndDrop={true}\n      canDropOnItemWithChildren={true}\n      canReorderItems={true}\n      dataProvider={new StaticTreeDataProvider(shortTree.items, (item, data) => ({ ...item, data }))}\n      getItemTitle={item => item.data}\n      viewState={{\n        ['tree-1']: {\n          expandedItems: ['container'],\n        },\n      }}\n      renderItemTitle={({ title }) => <span>{title}</span>}\n      renderItemArrow={({ item, context }) =>\n        item.hasChildren ? context.isExpanded ? <span>{'v '}</span> : <span>{'> '}</span> : null\n      }\n      renderItem={({ title, arrow, depth, context, children }) => (\n        <li\n          {...context.itemContainerWithChildrenProps}\n          style={{\n            margin: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'flex-start',\n          }}\n        >\n          <button {...context.itemContainerWithoutChildrenProps} {...context.interactiveElementProps}>\n            {arrow}\n            {title}\n          </button>\n          {children}\n        </li>\n      )}\n      renderTreeContainer={({ children, containerProps }) => <div {...containerProps}>{children}</div>}\n      renderItemsContainer={({ children, containerProps }) => <ul {...containerProps}>{children}</ul>}\n    >\n      <Tree treeId=\"tree-1\" rootItem=\"root\" treeLabel=\"Tree Example\" />\n    </UncontrolledTreeEnvironment>\n  );\n}\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"All currently available render hooks are documented in the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/treerenderprops"},"TreeRenderProps interface"),"."))),(0,o.kt)("h2",{id:"complex-example-for-custom-render-hooks"},"Complex Example for custom render hooks"),(0,o.kt)("p",null,"As part of the ",(0,o.kt)("inlineCode",{parentName:"p"},"react-complex-tree")," monorepo, we maintain official render logic that generates a tree according\nto the UI framework ",(0,o.kt)("a",{parentName:"p",href:"https://blueprintjs.com/docs/#core/components/tree"},"BlueprintJS")," by Palantir.\nYou can find the code for the custom render implementation\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/lukasbach/react-complex-tree/blob/main/packages/blueprintjs-renderers/src/renderers.tsx"},"here"),"."),(0,o.kt)(a.i,{storyName:"blueprintjs-renderers-blueprintjs-renderers--short-blueprint-js-tree",iframeProps:{width:600},mdxType:"StoryEmbed"}),(0,o.kt)("h2",{id:"customizing-the-render-logic-for-tree-items"},"Customizing the render logic for tree items"),(0,o.kt)("p",null,"The most interesting hook is probably the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/treerenderprops#renderitem"},"renderItem")," hook,\nwhich allows you to customize how individual tree items are rendered.\nWhen using this hook to render an item, you can use the provided\n",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/treeitemrendercontext"},"TreeItemRenderContext")," to access the render details of the item\n(e.g. whether the user currently drags over this item, or whether it is selected), and directly alter the\ntree state (i.e. ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/treeitemrendercontext#addtoselecteditems"},(0,o.kt)("inlineCode",{parentName:"a"},"context.addtoselecteditems()")),")."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"props.children")," prop contains the child nodes of the tree item. You need to render this so that children\nare displayed. In the above example, children are rendered as child nodes for the item node itself, according\nto W3C accessibility specifications. If you want to render a linear list of items, independent of item depth,\nfor example because you want to implement a virtualized list, you can do so by rendering the children outside the\nitem container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"renderItem={({ title, arrow, depth, context, children }) => (\n  <>\n    <li\n      {...context.itemContainerWithChildrenProps}\n    >\n      <button\n        {...context.itemContainerWithoutChildrenProps}\n        {...context.interactiveElementProps}\n      >\n        { arrow }\n        { title }\n      </button>\n    </li>\n    {children}\n  <>\n)}\n")),(0,o.kt)("p",null,"Make sure to provide the props-objects ",(0,o.kt)("inlineCode",{parentName:"p"},"context.itemContainerWithoutChildrenProps")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"context.itemContainerWithChildrenProps")," to the respective elements in your DOM structure, the first to the node\nthat contains the item and its children, and the second to the node that only contains the item without\nits children. This is necessary to compute sizing information during drags."),(0,o.kt)("p",null,"Furthermore, the ",(0,o.kt)("inlineCode",{parentName:"p"},"context.interactiveElementProps")," props can be spread to the interactive element to\nimplement default interaction handlers, so that clicking on an element invokes its primary actions,\nit is selected and focused etc. Those props implement the most common DOM interaction hooks and attach them\nto the tree state, meaning that you need to provide minimal implementation effort for custom renderers. You\ncan omit those props if you want to implement custom interaction logic."),(0,o.kt)("p",null,"Note that, if you want to customize the way how mouse clicks interact with the tree state (i.e. whether\nclicking on a parent node should expand it or just focus it) should not be changed by providing custom\nDOM hooks, but by choosing a different interaction mode.\n",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/interaction-modes"},"Read more on interaction modes here"),"."))}u.isMDXComponent=!0}}]);